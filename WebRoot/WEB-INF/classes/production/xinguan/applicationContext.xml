<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<description>Spring公共配置 </description>


	<!-- 定义受环境影响易变的变量 -->
	<bean
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:annotation-config />
	<context:component-scan base-package="com.usci" />

	<!-- Spring定时器注解开关-->
	<task:annotation-driven />

	<!--<task:scheduler id="testTask" pool-size="20" />

	<task:scheduled-tasks scheduler="testTask">
		<task:scheduled ref="pmoderTask" method="putXgExcel" cron="0 30 04 * * ?" />
	</task:scheduled-tasks>
	-->

	<aop:aspectj-autoproxy />
	<!-- druid 日志配置 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="connectionLogEnabled" value="false"/>
		<property name="statementLogEnabled" value="false"/>
		<property name="resultSetLogEnabled" value="true"/>
		<property name="statementExecutableSqlLogEnable" value="true"/>
	</bean>
	<!-- 数据源配置, 使用 BoneCP 数据库连接池  com.alibaba.druid.pool.DruidDataSource-->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- druid 连接池的 -->
		<property name="filters" value="stat,config" />
		<!-- 日志 -->
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter"/>
			</list>
		</property>

		<!-- 数据库解密 -->
		<!--<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}" />-->

		<!-- 下面druid 和 dbcp 连接池通用的 ↓↓↓↓↓↓↓↓↓↓↓↓ -->
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="150" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="10" />


		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<!-- <property name="testWhileIdle" value="true"/>  -->

	</bean>

	<bean id="sqldataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc1.url}"/>
		<property name="username" value="${jdbc1.username}"/>
		<property name="password" value="${jdbc1.password}"/>

		<!-- druid 连接池的 -->
		<property name="filters" value="stat,config" />
		<!-- 日志 -->
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter"/>
			</list>
		</property>

		<!-- 数据库解密 -->
		<!--<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}" />-->

		<!-- 下面druid 和 dbcp 连接池通用的 ↓↓↓↓↓↓↓↓↓↓↓↓ -->
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="150" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="10" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<!-- <property name="testWhileIdle" value="true"/>  -->

	</bean>

	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		  class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--<property name="hibernateProperties">
			<props>
				&lt;!&ndash;  <prop key="hibernate.hbm2ddl.auto">update</prop> &ndash;&gt;
				<prop key="hibernate.connection.provider_class">com.alibaba.druid.support.hibernate.DruidConnectionProvider</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				&lt;!&ndash;<prop key="hibernate.cache.provider_class">org.hibernate.annotations.EhCacheProvider</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache-hibernate-local.xml</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="minIdle">2</prop>
				<prop key="filter">stat</prop>
				<prop key="initialSize">5</prop>
				<prop key="maxActive">100</prop>
				<prop key="maxWait">60000</prop>
				<prop key="timeBetweenEvictionRunsMillis">60000</prop>
				<prop key="minEvictableIdleTimeMillis">300000</prop>
				<prop key="validationQuery">SELECT 1</prop>
				<prop key="testWhileIdle">true</prop>
				<prop key="testOnBorrow">false</prop>
				<prop key="testOnReturn">false</prop>
				<prop key="poolPreparedStatements">false</prop>
				<prop key="maxPoolPreparedStatementPerConnectionSize">200</prop>&ndash;&gt;
			</props>
		</property>-->

		<property name="packagesToScan" value="com.usci" ></property>

	</bean>

	<bean id="sqlsessionFactory"
		  class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="sqldataSource" />
		<!--<property name="hibernateProperties">
			<props>
				&lt;!&ndash;  <prop key="hibernate.hbm2ddl.auto">update</prop> &ndash;&gt;
				<prop key="hibernate.connection.provider_class">com.alibaba.druid.support.hibernate.DruidConnectionProvider</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				&lt;!&ndash;<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache-hibernate-local.xml</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>&ndash;&gt;
				<prop key="hibernate.connection.release_mode">after_transaction</prop>

				&lt;!&ndash;<prop key="minIdle">2</prop>
				<prop key="filter">stat</prop>
				<prop key="initialSize">5</prop>
				<prop key="maxActive">100</prop>
				<prop key="maxWait">60000</prop>
				<prop key="timeBetweenEvictionRunsMillis">60000</prop>
				<prop key="minEvictableIdleTimeMillis">300000</prop>
				<prop key="validationQuery">SELECT 1</prop>
				<prop key="testWhileIdle">true</prop>
				<prop key="testOnBorrow">false</prop>
				<prop key="testOnReturn">false</prop>
				<prop key="poolPreparedStatements">false</prop>
				<prop key="maxPoolPreparedStatementPerConnectionSize">200</prop>&ndash;&gt;
			</props>
		</property>-->

		<property name="packagesToScan" value="com.usci" ></property>

	</bean>



	<!-- 事务管理器配置,单数据源事务,将事务交由Spring管理 -->
	<bean id="transactionManager"
		  class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="sqltransactionManager"
		  class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sqlsessionFactory" />
	</bean>


	<!-- 开启注解事务 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
						  proxy-target-class="true" />

	<tx:annotation-driven transaction-manager="sqltransactionManager"
						  proxy-target-class="true" />

	<!-- druid spring monitor setting -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.usci.sample.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>